g2 <- HSfrgraphcore # (82,214)
W <- intersect(V(g1),V(g2)) # shared vertices
}
# Randomly select x and S from W, the shared vertices
(x <- sample(W,1))
W <- setdiff(W,x) # exclude x from W
maxseed <- min(length(W),s)
(S <- sort(sample(W,maxseed)))
NBDS <- localnbd(x,S,g1,g2,h,ell,R,gamma,plotF=TRUE)
str(NBDS)
dat <- NBDS$P
dat <- dat[,1:length(NBDS$ind2)]
rownames(dat) <- NBDS$ind1
colnames(dat) <- NBDS$ind2
image2(dat,text.cex=.8,log=TRUE,border="gray70",box.offset=0.1,srt=0,labels=c(2,3),mar=c(1,3,3,1))
Sx <- NBDS$Sx
x <- NBDS$labelsGxp[length(Sx)+1]
x.ind <- which(NBDS$labelsGx==x)
Cxp <- match(NBDS$Cxp,NBDS$labelsGxp)
if (NBDS$case=="possible") {
prob <- NBDS$P[x.ind,Cxp]
names(prob) <- NBDS$labelsGxp[Cxp]
x.prob <- prob[which.max(prob)]
vhatstar <- as.integer(names(x.prob))
rank.prob <- rank(-prob,ties.method = "average")
plot(as.integer(names(prob)), prob, type="h",col=2, lwd=2)
rank.prob <- matrix(rank.prob,nrow=1); colnames(rank.prob) <- paste0("V",names(prob))
kable(rank.prob,caption="Rank of matching probability for candidates")
}
?ego
require(igraph)
?ego
library(VN)
?trellis.focus
??trellis.focus
library(VN)
require(VN)
?localnbd
library(VN)
require(vn)
require(VN)
?sgm
library(VN)
require(VN)
?localnbd
require(VN)
?localnbd
localnbd
library(VN)
require(VN)
?pass2ranksuplus
?rank
(r1 <- rank(x1 <- c(3, 1, 4, 15, 92)))
x1[r1]
source('~/Dropbox/SGM/VN/R/pass2ranksuplus.r', echo=TRUE)
M = matrix(sample(8),4,2)
M
pass2ranksu(M)
rank(M)
M = matrix(runif(9),3,3)
M
pass2ranksu(M)
M2 = M
M2[M2!=0] = rank(M)
M2
library(VN)
pass2ranksplus
pass2ranks
library(VN)
pass2ranks
pass2ranksu
?pass2ranksu
?pass2ranksuplus
?pass2ranksu
M = matrix(runif(9),3,3)
pass2ranksu(M)
M2 = M
M2[M2!=0] = rank(M2[M2!=0])
M2
M2 = M
M2[M2!=0] = rank(M2[M2!=0]) / length(M)
M2
M
sort(M)
M[rank(M)]
as.vector(M)[rank(as.vector(M)]
as.vector(M)[rank(as.vector(M))]
rank(M)
sgm.igraph
require(VN)
X = matrix(runif(9),3,3)
X
pass2ranksu(X)
Y = pass2ranksu(X)
X[Y$mat]
rank(X)
rank(X[X!=0])
X[1:9 %% 2 == 0] <- 0
X
Y = pass2ranksu(X)
Y
Z = X
Z[Z!=0] <- rank(X[X!=0])
Z
require(igraph)
?sample_correlated_gnp
?runif
runif(25,5,5)
runif(25)
?upper.tri
?lower.tri
m2 = matrix(0,5,5)
upper.tri(m2)
choose(5,2)
p = sample(10)
m2[upper.tri(m2)] <- m2[lower.tri(m2)] <- p
m2
n=10
g=0.1
s <- sample(n);s
I <- diag(n);I
P <- I[s,];P
alpha <- runif(1,0,g);alpha
J <- matrix(1,n,n); # J
bc <- (1/n)*J #this is the barycenter
bc
P <- (1-alpha)*bc + alpha*P
P
s
I
P
s <- sample(n);s
I <- diag(n);I
P <- I[s,];P
alpha <- runif(1,0,g);alpha
J <- matrix(1,n,n); # J
bc <- (1/n)*J #this is the barycenter
P <- (1-alpha)*bc + alpha*P
return(P)
P
bc
#<link rel="stylesheet" href="http://vis.supstat.com/assets/themes/dinky/css/scianimator.css">
#<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"></script>
#<script src="http://vis.supstat.com/assets/themes/dinky/js/jquery.scianimator.min.js"></script>
suppressMessages(require(igraph))
suppressMessages(require(VN))
suppressMessages(require(Matrix))
suppressMessages(require(lattice))
suppressMessages(require(popbio))
suppressMessages(require(ggplot2))
suppressMessages(require(reshape2))
suppressMessages(require(knitr))
suppressMessages(require(printr))
suppressMessages(require(dplyr))
options(digits = 2)
source("~/Dropbox/SGM/nbdmaking/vn.R")
#knitr::opts_chunk$set(cache=TRUE, autodep=TRUE)
#dep_auto() # figure out dependencies automatically
opts_chunk$set(cache=FALSE,echo=TRUE,eval=TRUE,warning=FALSE,message=FALSE,comment="#",
dpi=100,dev=c('png','pdf'))
opts_knit$set(aliases=c(h='fig.height', w='fig.width', cap='fig.cap', scap='fig.scap'))
opts_knit$set(eval.after = c('fig.cap','fig.scap'))
knit_hooks$set(document = function(x) {                                                                gsub('(\\\\end\\{knitrout\\}[\n]+)', '\\1\\\\noindent ', x)                                  })
opts_knit$set(animation.fun = hook_scianimator)
#knit_hooks$set(plot = function(x, options) {
#       paste('<figure><img src="',
#             opts_knit$get('base.url'), paste(x, collapse = '.'),
#             '"><figcaption>', options$fig.cap, '</figcaption></figure>',
#             sep = '')
# })
fn = local({
i = 0
function(x) {
i <<- i + 1
#     paste('Figure ', i, ': ', x, sep = '')
paste('', '', x, sep = '')
}
})
rmd.convert <- function(fname, output=c('latex', 'word', 'html', "pdf")){
## Thanks to Robert Musk for helpful additions to make this run better on Windows
require(knitr)
require(tools)
thedir <- file_path_as_absolute(dirname(fname))
thefile <- (basename(fname))
create_latex <- function(f){
knit(f, 'tmp-outputfile.md');
newname <- paste0(file_path_sans_ext(f), ".tex")
mess <- paste('pandoc -f markdown -t latex -s -o', shQuote(newname),
"tmp-outputfile.md")
system(mess)
cat("The Latex file is", file.path(thedir, newname),
"\nIf transporting do not forget to include the folder", file.path(thedir, "figure"), "\n")
mess <- paste('rm tmp-outputfile.md')
system(mess)
}
create_word <- function(f){
knit(f, 'tmp-outputfile.md');
newname <- paste0(file_path_sans_ext(f),".docx")
mess <- paste('pandoc -f markdown -t docx -o', shQuote(newname), "tmp-outputfile.md")
system(mess)
cat("The Word (docx) file is", file.path(thedir, newname), "\n")
mess <- paste('rm tmp-outputfile.md')
system(mess)
}
create_html <- function(f){
knit2html(f)
cat("The main HTML file is", file.path(thedir, paste0(file_path_sans_ext(f), ".html")),
"\nIf transporting do not forget to include the folder", file.path(thedir, "figure"), "\n")
}
create_pdf <- function(f){
knit(f, 'tmp-outputfile.md');
newname <- paste0(file_path_sans_ext(f),".pdf")
mess <- paste('pandoc -f markdown -o', shQuote(newname), "tmp-outputfile.md")
system(mess)
cat("The PDF file is", file.path(thedir, newname), "\n")
mess <- paste('rm tmp-outputfile.md')
system(mess)
}
origdir <- getwd()
tryCatch({
setwd(thedir) ## put us next to the original Rmarkdown file
out <- match.arg(output)
switch(out,
latex=create_latex(thefile),
html=create_html(thefile),
pdf=create_pdf(thefile),
word=create_word(thefile)
)}, finally=setwd(origdir))
}
##################
rmarkdownTable <- function(df) {
cat(paste(names(df), collapse = "|"))
cat("\n")
cat(paste(rep("-", ncol(df)), collapse = "|"))
cat("\n")
for(i in 1:nrow(df)){
cat(paste(df[i,], collapse = "|"))
cat("\n")
}
invisible(NULL)
}
#require(xtable)
#tab <- xtable(head(iris),digits=2)
#print(tab, type="html")
#(http://www.cis.jhu.edu/~parky/XDATA/SGM/27SGM_for_VN_20160518.pdf)
s <- 12
load(paste0("~/Dropbox/SGM/nbdmaking/MC-new2-HS-full-s",s,".Rbin"))
case2 <- (sapply(MC,"[",1))
seed2 <- paste0("s",sapply(MC,"[",2)); seed2[case2!="possible"] <- "s0"
ncandidate2 <- as.numeric(sapply(MC,"[",3))
rank.vstar2 <- as.numeric(sapply(MC,"[",4))
df2 <- data.frame(case=case2,seed=seed2,ncand=ncandidate2,rank=rank.vstar2)
df2 <- df2 %>% mutate(norm.rank=(rank-1)/(ncand-1))
df21 <- subset(df2,case=="possible")
kable(df2 %>% group_by(case,seed) %>% summarize(count=n(),mean.ncand=mean(ncand), mean.nrank=mean(norm.rank,na.rm=TRUE)),caption="A summary statistics using the full graphs")
table(df2$case)
table(df21$seed)
ggplot(df21,aes(x=ncand,fill=seed)) + scale_fill_brewer(name="s_x",palette="Set1") +
#    theme(text=element_text(size=13)) + xlab("number of candidates") +
#       geom_histogram(binwidth=1,position="identity",alpha=0.5)
#       geom_density(alpha=0.5,adjust=1)
facet_wrap(~seed) + #scale_fill_manual("s_x") +
geom_histogram(binwidth=1,position="identity",alpha=1)
print(load("~/Dropbox/BlueBrain/vnsgm-mc1000-nums10.Rbin"))
s
s=10
case2 <- (sapply(MC,"[",1))
seed2 <- paste0("s",sapply(MC,"[",2)); seed2[case2!="possible"] <- "s0"
ncandidate2 <- as.numeric(sapply(MC,"[",3))
rank.vstar2 <- as.numeric(sapply(MC,"[",4))
df2 <- data.frame(case=case2,seed=seed2,ncand=ncandidate2,rank=rank.vstar2)
df2 <- df2 %>% mutate(norm.rank=(rank-1)/(ncand-1))
df21 <- subset(df2,case=="possible")
kable(df2 %>% group_by(case,seed) %>% summarize(count=n(),mean.ncand=mean(ncand), mean.nrank=mean(norm.rank,na.rm=TRUE)),caption="A summary statistics using the full graphs")
table(df2$case)
table(df21$seed)
ggplot(df21,aes(x=ncand,fill=seed)) + scale_fill_brewer(name="s_x",palette="Set1") +
#    theme(text=element_text(size=13)) + xlab("number of candidates") +
#       geom_histogram(binwidth=1,position="identity",alpha=0.5)
#       geom_density(alpha=0.5,adjust=1)
facet_wrap(~seed) + #scale_fill_manual("s_x") +
geom_histogram(binwidth=1,position="identity",alpha=1)
df2$ncand <- paste0("c",sprintf("%02d",df2$ncand))
df2 <- subset(df2,case=="possible")
ggplot(df2,aes(x=norm.rank,fill=seed)) + scale_fill_brewer(name="s_x",palette="Set1") +
facet_wrap(~seed) + #scale_fill_manual("s_x") +
geom_histogram(binwidth=.05,position="identity",alpha=1)#, aes(fill=..count..))
ggplot(subset(df2,seed%in%c("s1","s2","s3")),aes(x=norm.rank,fill=seed)) + scale_fill_brewer(name="s_x",palette="Set1") +
facet_grid(ncand~seed) + #scale_fill_manual("s_x") +
geom_histogram(binwidth=.05,position="identity",alpha=1)#, aes(fill=..count..))
MC[[1]]
sprintf(0:10, %02d)
?sprintf
sprintf("%02d",0:10)
sapply(MC,"[",2)
table(sapply(MC,"[",2))
table(sapply(MC,"[",1))
case2 <- (sapply(MC,"[",1))
seed2 <- paste0("s",sprintf("%02d",as.numeric(sapply(MC,"[",2)))); seed2[case2!="possible"] <- "s0"
ncandidate2 <- as.numeric(sapply(MC,"[",3))
rank.vstar2 <- as.numeric(sapply(MC,"[",4))
df2 <- data.frame(case=case2,seed=seed2,ncand=ncandidate2,rank=rank.vstar2)
df2 <- df2 %>% mutate(norm.rank=(rank-1)/(ncand-1))
df21 <- subset(df2,case=="possible")
kable(df2 %>% group_by(case,seed) %>% summarize(count=n(),mean.ncand=mean(ncand), mean.nrank=mean(norm.rank,na.rm=TRUE)),caption="A summary statistics using the full graphs")
table(df2$case)
table(df21$seed)
ggplot(df21,aes(x=ncand,fill=seed)) + scale_fill_brewer(name="s_x",palette="Set1") +
#    theme(text=element_text(size=13)) + xlab("number of candidates") +
#       geom_histogram(binwidth=1,position="identity",alpha=0.5)
#       geom_density(alpha=0.5,adjust=1)
facet_wrap(~seed) + #scale_fill_manual("s_x") +
geom_histogram(binwidth=1,position="identity",alpha=1)
df2$ncand <- paste0("c",sprintf("%02d",df2$ncand))
df2 <- subset(df2,case=="possible")
ggplot(df2,aes(x=norm.rank,fill=seed)) + scale_fill_brewer(name="s_x",palette="Set1") +
facet_wrap(~seed) + #scale_fill_manual("s_x") +
geom_histogram(binwidth=.05,position="identity",alpha=1)#, aes(fill=..count..))
ggplot(subset(df2,seed%in%c("s1","s2","s3")),aes(x=norm.rank,fill=seed)) + scale_fill_brewer(name="s_x",palette="Set1") +
facet_grid(ncand~seed) + #scale_fill_manual("s_x") +
geom_histogram(binwidth=.05,position="identity",alpha=1)#, aes(fill=..count..))
ggplot(subset(df2,seed%in%c("s01","s02","s03")),aes(x=norm.rank,fill=seed)) + scale_fill_brewer(name="s_x",palette="Set1") +
facet_grid(ncand~seed) + #scale_fill_manual("s_x") +
geom_histogram(binwidth=.05,position="identity",alpha=1)#, aes(fill=..count..))
require(VN)
sgm
require(VN)
?sgm
require(VN)
?sgm
?localnbd
require(VN)
vnsgm
library(VN)
vnsgm
alias
?alias
library(VN)
vnsgm
library(VN)
?warning
library(VN)
localnbd
library(VN)
localnbd
?localnbd
localnbd()
# Chunk 1: setup
#<link rel="stylesheet" href="http://vis.supstat.com/assets/themes/dinky/css/scianimator.css">
#<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"></script>
#<script src="http://vis.supstat.com/assets/themes/dinky/js/jquery.scianimator.min.js"></script>
suppressMessages(require(igraph))
suppressMessages(require(VN))
suppressMessages(require(Matrix))
suppressMessages(require(lattice))
suppressMessages(require(popbio))
suppressMessages(require(ggplot2))
suppressMessages(require(reshape2))
suppressMessages(require(knitr))
suppressMessages(require(printr))
suppressMessages(require(dplyr))
options(digits = 2)
source("~/Dropbox/SGM/nbdmaking/vn.R")
#knitr::opts_chunk$set(cache=TRUE, autodep=TRUE)
#dep_auto() # figure out dependencies automatically
opts_chunk$set(cache=FALSE,echo=TRUE,eval=TRUE,warning=FALSE,message=FALSE,comment="#",
dpi=100,dev=c('png','pdf'))
opts_knit$set(aliases=c(h='fig.height', w='fig.width', cap='fig.cap', scap='fig.scap'))
opts_knit$set(eval.after = c('fig.cap','fig.scap'))
knit_hooks$set(document = function(x) {                                                                gsub('(\\\\end\\{knitrout\\}[\n]+)', '\\1\\\\noindent ', x)                                  })
opts_knit$set(animation.fun = hook_scianimator)
#knit_hooks$set(plot = function(x, options) {
#       paste('<figure><img src="',
#             opts_knit$get('base.url'), paste(x, collapse = '.'),
#             '"><figcaption>', options$fig.cap, '</figcaption></figure>',
#             sep = '')
# })
fn = local({
i = 0
function(x) {
i <<- i + 1
#     paste('Figure ', i, ': ', x, sep = '')
paste('', '', x, sep = '')
}
})
rmd.convert <- function(fname, output=c('latex', 'word', 'html', "pdf")){
## Thanks to Robert Musk for helpful additions to make this run better on Windows
require(knitr)
require(tools)
thedir <- file_path_as_absolute(dirname(fname))
thefile <- (basename(fname))
create_latex <- function(f){
knit(f, 'tmp-outputfile.md');
newname <- paste0(file_path_sans_ext(f), ".tex")
mess <- paste('pandoc -f markdown -t latex -s -o', shQuote(newname),
"tmp-outputfile.md")
system(mess)
cat("The Latex file is", file.path(thedir, newname),
"\nIf transporting do not forget to include the folder", file.path(thedir, "figure"), "\n")
mess <- paste('rm tmp-outputfile.md')
system(mess)
}
create_word <- function(f){
knit(f, 'tmp-outputfile.md');
newname <- paste0(file_path_sans_ext(f),".docx")
mess <- paste('pandoc -f markdown -t docx -o', shQuote(newname), "tmp-outputfile.md")
system(mess)
cat("The Word (docx) file is", file.path(thedir, newname), "\n")
mess <- paste('rm tmp-outputfile.md')
system(mess)
}
create_html <- function(f){
knit2html(f)
cat("The main HTML file is", file.path(thedir, paste0(file_path_sans_ext(f), ".html")),
"\nIf transporting do not forget to include the folder", file.path(thedir, "figure"), "\n")
}
create_pdf <- function(f){
knit(f, 'tmp-outputfile.md');
newname <- paste0(file_path_sans_ext(f),".pdf")
mess <- paste('pandoc -f markdown -o', shQuote(newname), "tmp-outputfile.md")
system(mess)
cat("The PDF file is", file.path(thedir, newname), "\n")
mess <- paste('rm tmp-outputfile.md')
system(mess)
}
origdir <- getwd()
tryCatch({
setwd(thedir) ## put us next to the original Rmarkdown file
out <- match.arg(output)
switch(out,
latex=create_latex(thefile),
html=create_html(thefile),
pdf=create_pdf(thefile),
word=create_word(thefile)
)}, finally=setwd(origdir))
}
##################
rmarkdownTable <- function(df) {
cat(paste(names(df), collapse = "|"))
cat("\n")
cat(paste(rep("-", ncol(df)), collapse = "|"))
cat("\n")
for(i in 1:nrow(df)){
cat(paste(df[i,], collapse = "|"))
cat("\n")
}
invisible(NULL)
}
#require(xtable)
#tab <- xtable(head(iris),digits=2)
#print(tab, type="html")
#(http://www.cis.jhu.edu/~parky/XDATA/SGM/27SGM_for_VN_20160518.pdf)
# Chunk 2: toy1
suppressMessages(require(VN)) ||  install.packages("http://username:password@www.cis.jhu.edu/~parky/XDATA/SGM/VN_0.1.0.tar.gz",type="source",method="wget")
suppressMessages(require(igraph))
sim <- TRUE # if TRUE, run simulation, otherwise do the HS experiment
HS <- "full" # or "core"
# parameters for finding seeds
s <- ifelse(sim,4,12) # number of seeds to be used for SGM
h <- ell <- 1 # max walk for finding neighborhoods
# parameters for SGM
R <- 100     # repeat SGM R times to get averaged P matrix
gamma <- 0.1 # number of iterations for the Frank-Wolfe algorithm
mc <- 2
set.seed(1234+mc)
if (sim) {
# generate a pair of correlated graphs
m <- 5  # |J| = junk on G1
n <- 20 # |W| = shared vertices on G1, not including x and S
mp <- 0 # |J'| = junk on G2
d <- 5  # for RDPG, dimension of the random vectors
corr <- 0.5 # for correlated graphs
(nV1 <- 1+s+n+m)
(nV2 <- 1+s+n+mp)
lpvs <- sample_sphere_surface(dim=d, n=nV1)/1.5 # random vectors for RDPG
gg <- rdpg.sample.correlated(t(lpvs),corr)
g1 <- gg[[1]];
g2 <- gg[[2]];
g2 <- delete_vertices(g2,v=(nV2+1):nV1); # remove m vertices from G' to make |V(G)| != |V(G')|
W <- intersect(V(g1),V(g2)) # shared vertices
} else {
data("HSgraphs")
if (HS == "full") {
# rearrange the vertices so that the to-be-selected seeds are valid
perm.fb <- c(coremap[,1],setdiff(1:vcount(HSfbgraphfull),coremap[,1]))
perm.fr <- c(coremap[,2],setdiff(1:vcount(HSfriendsgraphfull),coremap[,2]))
g1 <- permute.vertices(HSfbgraphfull,perm.fb) # (156,1437)
g2 <- permute.vertices(HSfriendsgraphfull,perm.fr) # (134,668)
W <- 1:nrow(coremap) # seeds should be selected from the shared (core) vertices
} else { # core graphs
g1 <- HSfbgraphcore # (82,513)
g2 <- HSfrgraphcore # (82,214)
W <- intersect(V(g1),V(g2)) # shared vertices
}
# Chunk 3: seed
# Randomly select x and S from W, the shared vertices
(x <- sample(W,1))
W <- setdiff(W,x) # exclude x from W
maxseed <- min(length(W),s)
(S <- sort(sample(W,maxseed)))
# Determine Sx and C'x, then do SGM
NBDS <- localnbd(x,S,g1,g2,h,ell,R,gamma,plotF=TRUE)
str(NBDS)
library(VN)
# Determine Sx and C'x, then do SGM
NBDS <- localnbd(x,S,g1,g2,h,ell,R,gamma,plotF=TRUE)
# Determine Sx and C'x, then do SGM
NBDS2 <- vnsgm(x,S,g1,g2,h,ell,R,gamma,plotF=TRUE)
str(NBDS)
str(NBDS2)
vnsgm
library(VN)
