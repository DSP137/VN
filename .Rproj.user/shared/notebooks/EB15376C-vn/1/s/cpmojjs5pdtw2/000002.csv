"0","suppressMessages(require(VN))"
"0","suppressMessages(require(igraph))"
"0","sim <- TRUE # if TRUE, run simulation, otherwise do the HS experiment"
"0","HS <- ""full"" # or ""core"""
"0","# parameters for finding seeds"
"0","s <- ifelse(sim,4,12) # number of seeds to be used for SGM"
"0","h <- ell <- 1 # max walk for finding neighborhoods"
"0","# parameters for SGM"
"0","R <- 100     # repeat SGM R times to get averaged P matrix"
"0","gamma <- 0.1 # number of iterations for the Frank-Wolfe algorithm"
"0","mc <- 2"
"0","set.seed(1234+mc)"
"0","if (sim) {"
"0","    # generate a pair of correlated graphs"
"0","    m <- 5  # |J| = junk on G1"
"0","    n <- 20 # |W| = shared vertices on G1, not including x and S"
"0","    mp <- 0 # |J'| = junk on G2 "
"0","    d <- 5  # for RDPG, dimension of the random vectors"
"0","    corr <- 0.5 # for correlated graphs"
"0","    (nV1 <- 1+s+n+m)"
"0","    (nV2 <- 1+s+n+mp)"
"0","    lpvs <- sample_sphere_surface(dim=d, n=nV1)/1.5 # random vectors for RDPG"
"0","    gg <- rdpg.sample.correlated(t(lpvs),corr)"
"0","    g1 <- gg[[1]]; "
"0","    g2 <- gg[[2]]; "
"0","    g2 <- delete_vertices(g2,v=(nV2+1):nV1); # remove m vertices from G' to make |V(G)| != |V(G')|"
"0","    W <- intersect(V(g1),V(g2)) # shared vertices"
"0","} else {"
"0","    data(""HSgraphs"")"
"0","    if (HS == ""full"") {"
"0","        # rearrange the vertices so that the to-be-selected seeds are valid"
"0","        perm.fb <- c(coremap[,1],setdiff(1:vcount(HSfbgraphfull),coremap[,1]))"
"0","        perm.fr <- c(coremap[,2],setdiff(1:vcount(HSfriendsgraphfull),coremap[,2]))"
"0","        g1 <- permute.vertices(HSfbgraphfull,perm.fb) # (156,1437)"
"0","        g2 <- permute.vertices(HSfriendsgraphfull,perm.fr) # (134,668)"
"0","        W <- 1:nrow(coremap) # seeds should be selected from the shared (core) vertices"
"0","    } else { # core graphs"
"0","        g1 <- HSfbgraphcore # (82,513)"
"0","        g2 <- HSfrgraphcore # (82,214)"
"0","        W <- intersect(V(g1),V(g2)) # shared vertices"
"0","    }"
"0","}"
